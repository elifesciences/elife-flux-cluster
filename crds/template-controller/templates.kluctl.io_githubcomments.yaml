{"payload":{"allShortcutsEnabled":false,"fileTree":{"charts/template-controller/crds":{"items":[{"name":"templates.kluctl.io_githubcomments.yaml","path":"charts/template-controller/crds/templates.kluctl.io_githubcomments.yaml","contentType":"file"},{"name":"templates.kluctl.io_gitlabcomments.yaml","path":"charts/template-controller/crds/templates.kluctl.io_gitlabcomments.yaml","contentType":"file"},{"name":"templates.kluctl.io_gitprojectors.yaml","path":"charts/template-controller/crds/templates.kluctl.io_gitprojectors.yaml","contentType":"file"},{"name":"templates.kluctl.io_listgithubpullrequests.yaml","path":"charts/template-controller/crds/templates.kluctl.io_listgithubpullrequests.yaml","contentType":"file"},{"name":"templates.kluctl.io_listgitlabmergerequests.yaml","path":"charts/template-controller/crds/templates.kluctl.io_listgitlabmergerequests.yaml","contentType":"file"},{"name":"templates.kluctl.io_objecthandlers.yaml","path":"charts/template-controller/crds/templates.kluctl.io_objecthandlers.yaml","contentType":"file"},{"name":"templates.kluctl.io_objecttemplates.yaml","path":"charts/template-controller/crds/templates.kluctl.io_objecttemplates.yaml","contentType":"file"},{"name":"templates.kluctl.io_texttemplates.yaml","path":"charts/template-controller/crds/templates.kluctl.io_texttemplates.yaml","contentType":"file"}],"totalCount":8},"charts/template-controller":{"items":[{"name":"crds","path":"charts/template-controller/crds","contentType":"directory"},{"name":"templates","path":"charts/template-controller/templates","contentType":"directory"},{"name":".helmignore","path":"charts/template-controller/.helmignore","contentType":"file"},{"name":"CHANGELOG.md","path":"charts/template-controller/CHANGELOG.md","contentType":"file"},{"name":"Chart.yaml","path":"charts/template-controller/Chart.yaml","contentType":"file"},{"name":"README.md","path":"charts/template-controller/README.md","contentType":"file"},{"name":"values.yaml","path":"charts/template-controller/values.yaml","contentType":"file"}],"totalCount":7},"charts":{"items":[{"name":"flux-kluctl-controller","path":"charts/flux-kluctl-controller","contentType":"directory"},{"name":"template-controller","path":"charts/template-controller","contentType":"directory"}],"totalCount":2},"":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":"charts","path":"charts","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"Taskfile.yml","path":"Taskfile.yml","contentType":"file"},{"name":"cr.yaml","path":"cr.yaml","contentType":"file"},{"name":"ct.yaml","path":"ct.yaml","contentType":"file"},{"name":"install-charts.gif","path":"install-charts.gif","contentType":"file"}],"totalCount":8}},"fileTreeProcessingTime":7.091588000000001,"foldersToFetch":[],"reducedMotionEnabled":null,"repo":{"id":530971728,"defaultBranch":"main","name":"charts","ownerLogin":"kluctl","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2022-08-31T07:07:05.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/102245272?v=4","public":true,"private":false,"isOrgOwned":true},"refInfo":{"name":"template-controller-0.2.2","listCacheKey":"v0:1687939091.0","canEdit":false,"refType":"tag","currentOid":"106c868a0a57eb467f85a4240cc98d3e9c15fc17"},"path":"charts/template-controller/crds/templates.kluctl.io_githubcomments.yaml","currentUser":null,"blob":{"rawBlob":"---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version: v0.9.2\n  creationTimestamp: null\n  name: githubcomments.templates.kluctl.io\nspec:\n  group: templates.kluctl.io\n  names:\n    kind: GithubComment\n    listKind: GithubCommentList\n    plural: githubcomments\n    singular: githubcomment\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        description: GithubComment is the Schema for the githubcomments API\n        properties:\n          apiVersion:\n            description: 'APIVersion defines the versioned schema of this representation\n              of an object. Servers should convert recognized schemas to the latest\n              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n            type: string\n          kind:\n            description: 'Kind is a string value representing the REST resource this\n              object represents. Servers may infer this from the endpoint the client\n              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n            type: string\n          metadata:\n            type: object\n          spec:\n            description: GithubCommentSpec defines the desired state of GithubComment\n            properties:\n              comment:\n                properties:\n                  id:\n                    description: Id specifies the identifier to be used by the controller\n                      when it needs to find the actual comment when it does not know\n                      the internal id. This Id is written into the comment inside\n                      a comment, so that a simple text search can reveal the comment\n                    type: string\n                  source:\n                    description: 'Source specifies the source content for the comment.\n                      Different source types are supported: Text, ConfigMap and TextTemplate'\n                    properties:\n                      configMap:\n                        description: ConfigMap specifies a ConfigMap and a key to\n                          load the source content from\n                        properties:\n                          key:\n                            type: string\n                          name:\n                            type: string\n                        required:\n                        - key\n                        - name\n                        type: object\n                      text:\n                        description: Text specifies a raw text comment.\n                        type: string\n                      textTemplate:\n                        description: TextTemplate specifies a TextTemplate to load\n                          the source content from\n                        properties:\n                          name:\n                            description: Name of the referent.\n                            type: string\n                        required:\n                        - name\n                        type: object\n                    type: object\n                required:\n                - source\n                type: object\n              github:\n                properties:\n                  owner:\n                    description: Owner specifies the GitHub user or organisation that\n                      owns the repository\n                    type: string\n                  pullRequestId:\n                    description: PullRequestId specifies the pull request ID.\n                    type: integer\n                  repo:\n                    description: Repo specifies the repository name.\n                    type: string\n                  tokenRef:\n                    description: TokenRef specifies a secret and key to load the GitHub\n                      API token from\n                    properties:\n                      key:\n                        type: string\n                      secretName:\n                        type: string\n                    required:\n                    - key\n                    - secretName\n                    type: object\n                required:\n                - owner\n                - pullRequestId\n                - repo\n                type: object\n              suspend:\n                default: false\n                description: Suspend can be used to suspend the reconciliation of\n                  this object\n                type: boolean\n            required:\n            - comment\n            - github\n            type: object\n          status:\n            description: GithubCommentStatus defines the observed state of GithubComment\n            properties:\n              commentId:\n                type: string\n              conditions:\n                items:\n                  description: \"Condition contains details for one aspect of the current\n                    state of this API Resource. --- This struct is intended for direct\n                    use as an array at the field path .status.conditions.  For example,\n                    \\n type FooStatus struct{ // Represents the observations of a\n                    foo's current state. // Known .status.conditions.type are: \\\"Available\\\",\n                    \\\"Progressing\\\", and \\\"Degraded\\\" // +patchMergeKey=type // +patchStrategy=merge\n                    // +listType=map // +listMapKey=type Conditions []metav1.Condition\n                    `json:\\\"conditions,omitempty\\\" patchStrategy:\\\"merge\\\" patchMergeKey:\\\"type\\\"\n                    protobuf:\\\"bytes,1,rep,name=conditions\\\"` \\n // other fields }\"\n                  properties:\n                    lastTransitionTime:\n                      description: lastTransitionTime is the last time the condition\n                        transitioned from one status to another. This should be when\n                        the underlying condition changed.  If that is not known, then\n                        using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n                      description: message is a human readable message indicating\n                        details about the transition. This may be an empty string.\n                      maxLength: 32768\n                      type: string\n                    observedGeneration:\n                      description: observedGeneration represents the .metadata.generation\n                        that the condition was set based upon. For instance, if .metadata.generation\n                        is currently 12, but the .status.conditions[x].observedGeneration\n                        is 9, the condition is out of date with respect to the current\n                        state of the instance.\n                      format: int64\n                      minimum: 0\n                      type: integer\n                    reason:\n                      description: reason contains a programmatic identifier indicating\n                        the reason for the condition's last transition. Producers\n                        of specific condition types may define expected values and\n                        meanings for this field, and whether the values are considered\n                        a guaranteed API. The value should be a CamelCase string.\n                        This field may not be empty.\n                      maxLength: 1024\n                      minLength: 1\n                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\n                      type: string\n                    status:\n                      description: status of the condition, one of True, False, Unknown.\n                      enum:\n                      - \"True\"\n                      - \"False\"\n                      - Unknown\n                      type: string\n                    type:\n                      description: type of condition in CamelCase or in foo.example.com/CamelCase.\n                        --- Many .condition.type values are consistent across resources\n                        like Available, but because arbitrary conditions can be useful\n                        (see .node.status.conditions), the ability to deconflict is\n                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n                      maxLength: 316\n                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\n                      type: string\n                  required:\n                  - lastTransitionTime\n                  - message\n                  - reason\n                  - status\n                  - type\n                  type: object\n                type: array\n              lastPostedBodyHash:\n                type: string\n            type: object\n        type: object\n    served: true\n    storage: true\n    subresources:\n      status: {}\n","colorizedLines":["---","<span class=\"pl-ent\">apiVersion</span>: <span class=\"pl-s\">apiextensions.k8s.io/v1</span>","<span class=\"pl-ent\">kind</span>: <span class=\"pl-s\">CustomResourceDefinition</span>","<span class=\"pl-ent\">metadata</span>:","  <span class=\"pl-ent\">annotations</span>:","    <span class=\"pl-ent\">controller-gen.kubebuilder.io/version</span>: <span class=\"pl-s\">v0.9.2</span>","  <span class=\"pl-ent\">creationTimestamp</span>: <span class=\"pl-c1\">null</span>","  <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">githubcomments.templates.kluctl.io</span>","<span class=\"pl-ent\">spec</span>:","  <span class=\"pl-ent\">group</span>: <span class=\"pl-s\">templates.kluctl.io</span>","  <span class=\"pl-ent\">names</span>:","    <span class=\"pl-ent\">kind</span>: <span class=\"pl-s\">GithubComment</span>","    <span class=\"pl-ent\">listKind</span>: <span class=\"pl-s\">GithubCommentList</span>","    <span class=\"pl-ent\">plural</span>: <span class=\"pl-s\">githubcomments</span>","    <span class=\"pl-ent\">singular</span>: <span class=\"pl-s\">githubcomment</span>","  <span class=\"pl-ent\">scope</span>: <span class=\"pl-s\">Namespaced</span>","  <span class=\"pl-ent\">versions</span>:","  - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">v1alpha1</span>","    <span class=\"pl-ent\">schema</span>:","      <span class=\"pl-ent\">openAPIV3Schema</span>:","        <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">GithubComment is the Schema for the githubcomments API</span>","        <span class=\"pl-ent\">properties</span>:","          <span class=\"pl-ent\">apiVersion</span>:","            <span class=\"pl-ent\">description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>APIVersion defines the versioned schema of this representation</span>","<span class=\"pl-s\">              of an object. Servers should convert recognized schemas to the latest</span>","<span class=\"pl-s\">              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources<span class=\"pl-pds\">&#39;</span></span>","            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","          <span class=\"pl-ent\">kind</span>:","            <span class=\"pl-ent\">description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>Kind is a string value representing the REST resource this</span>","<span class=\"pl-s\">              object represents. Servers may infer this from the endpoint the client</span>","<span class=\"pl-s\">              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds<span class=\"pl-pds\">&#39;</span></span>","            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","          <span class=\"pl-ent\">metadata</span>:","            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","          <span class=\"pl-ent\">spec</span>:","            <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">GithubCommentSpec defines the desired state of GithubComment</span>","            <span class=\"pl-ent\">properties</span>:","              <span class=\"pl-ent\">comment</span>:","                <span class=\"pl-ent\">properties</span>:","                  <span class=\"pl-ent\">id</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Id specifies the identifier to be used by the controller</span>","                      <span class=\"pl-s\">when it needs to find the actual comment when it does not know</span>","                      <span class=\"pl-s\">the internal id. This Id is written into the comment inside</span>","                      <span class=\"pl-s\">a comment, so that a simple text search can reveal the comment</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                  <span class=\"pl-ent\">source</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>Source specifies the source content for the comment.</span>","<span class=\"pl-s\">                      Different source types are supported: Text, ConfigMap and TextTemplate<span class=\"pl-pds\">&#39;</span></span>","                    <span class=\"pl-ent\">properties</span>:","                      <span class=\"pl-ent\">configMap</span>:","                        <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">ConfigMap specifies a ConfigMap and a key to</span>","                          <span class=\"pl-s\">load the source content from</span>","                        <span class=\"pl-ent\">properties</span>:","                          <span class=\"pl-ent\">key</span>:","                            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                          <span class=\"pl-ent\">name</span>:","                            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                        <span class=\"pl-ent\">required</span>:","                        - <span class=\"pl-s\">key</span>","                        - <span class=\"pl-s\">name</span>","                        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","                      <span class=\"pl-ent\">text</span>:","                        <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Text specifies a raw text comment.</span>","                        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                      <span class=\"pl-ent\">textTemplate</span>:","                        <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">TextTemplate specifies a TextTemplate to load</span>","                          <span class=\"pl-s\">the source content from</span>","                        <span class=\"pl-ent\">properties</span>:","                          <span class=\"pl-ent\">name</span>:","                            <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Name of the referent.</span>","                            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                        <span class=\"pl-ent\">required</span>:","                        - <span class=\"pl-s\">name</span>","                        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","                <span class=\"pl-ent\">required</span>:","                - <span class=\"pl-s\">source</span>","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","              <span class=\"pl-ent\">github</span>:","                <span class=\"pl-ent\">properties</span>:","                  <span class=\"pl-ent\">owner</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Owner specifies the GitHub user or organisation that</span>","                      <span class=\"pl-s\">owns the repository</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                  <span class=\"pl-ent\">pullRequestId</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">PullRequestId specifies the pull request ID.</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">integer</span>","                  <span class=\"pl-ent\">repo</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Repo specifies the repository name.</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                  <span class=\"pl-ent\">tokenRef</span>:","                    <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">TokenRef specifies a secret and key to load the GitHub</span>","                      <span class=\"pl-s\">API token from</span>","                    <span class=\"pl-ent\">properties</span>:","                      <span class=\"pl-ent\">key</span>:","                        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                      <span class=\"pl-ent\">secretName</span>:","                        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                    <span class=\"pl-ent\">required</span>:","                    - <span class=\"pl-s\">key</span>","                    - <span class=\"pl-s\">secretName</span>","                    <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","                <span class=\"pl-ent\">required</span>:","                - <span class=\"pl-s\">owner</span>","                - <span class=\"pl-s\">pullRequestId</span>","                - <span class=\"pl-s\">repo</span>","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","              <span class=\"pl-ent\">suspend</span>:","                <span class=\"pl-ent\">default</span>: <span class=\"pl-c1\">false</span>","                <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">Suspend can be used to suspend the reconciliation of</span>","                  <span class=\"pl-s\">this object</span>","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">boolean</span>","            <span class=\"pl-ent\">required</span>:","            - <span class=\"pl-s\">comment</span>","            - <span class=\"pl-s\">github</span>","            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","          <span class=\"pl-ent\">status</span>:","            <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">GithubCommentStatus defines the observed state of GithubComment</span>","            <span class=\"pl-ent\">properties</span>:","              <span class=\"pl-ent\">commentId</span>:","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","              <span class=\"pl-ent\">conditions</span>:","                <span class=\"pl-ent\">items</span>:","                  <span class=\"pl-ent\">description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>Condition contains details for one aspect of the current</span>","<span class=\"pl-s\">                    state of this API Resource. --- This struct is intended for direct</span>","<span class=\"pl-s\">                    use as an array at the field path .status.conditions.  For example,</span>","<span class=\"pl-s\">                    <span class=\"pl-cce\">\\n</span> type FooStatus struct{ // Represents the observations of a</span>","<span class=\"pl-s\">                    foo&#39;s current state. // Known .status.conditions.type are: <span class=\"pl-cce\">\\&quot;</span>Available<span class=\"pl-cce\">\\&quot;</span>,</span>","<span class=\"pl-s\">                    <span class=\"pl-cce\">\\&quot;</span>Progressing<span class=\"pl-cce\">\\&quot;</span>, and <span class=\"pl-cce\">\\&quot;</span>Degraded<span class=\"pl-cce\">\\&quot;</span> // +patchMergeKey=type // +patchStrategy=merge</span>","<span class=\"pl-s\">                    // +listType=map // +listMapKey=type Conditions []metav1.Condition</span>","<span class=\"pl-s\">                    `json:<span class=\"pl-cce\">\\&quot;</span>conditions,omitempty<span class=\"pl-cce\">\\&quot;</span> patchStrategy:<span class=\"pl-cce\">\\&quot;</span>merge<span class=\"pl-cce\">\\&quot;</span> patchMergeKey:<span class=\"pl-cce\">\\&quot;</span>type<span class=\"pl-cce\">\\&quot;</span></span>","<span class=\"pl-s\">                    protobuf:<span class=\"pl-cce\">\\&quot;</span>bytes,1,rep,name=conditions<span class=\"pl-cce\">\\&quot;</span>` <span class=\"pl-cce\">\\n</span> // other fields }<span class=\"pl-pds\">&quot;</span></span>","                  <span class=\"pl-ent\">properties</span>:","                    <span class=\"pl-ent\">lastTransitionTime</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">lastTransitionTime is the last time the condition</span>","                        <span class=\"pl-s\">transitioned from one status to another. This should be when</span>","                        <span class=\"pl-s\">the underlying condition changed.  If that is not known, then</span>","                        <span class=\"pl-s\">using the time when the API field changed is acceptable.</span>","                      <span class=\"pl-ent\">format</span>: <span class=\"pl-s\">date-time</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                    <span class=\"pl-ent\">message</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">message is a human readable message indicating</span>","                        <span class=\"pl-s\">details about the transition. This may be an empty string.</span>","                      <span class=\"pl-ent\">maxLength</span>: <span class=\"pl-c1\">32768</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                    <span class=\"pl-ent\">observedGeneration</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">observedGeneration represents the .metadata.generation</span>","                        <span class=\"pl-s\">that the condition was set based upon. For instance, if .metadata.generation</span>","                        <span class=\"pl-s\">is currently 12, but the .status.conditions[x].observedGeneration</span>","                        <span class=\"pl-s\">is 9, the condition is out of date with respect to the current</span>","                        <span class=\"pl-s\">state of the instance.</span>","                      <span class=\"pl-ent\">format</span>: <span class=\"pl-s\">int64</span>","                      <span class=\"pl-ent\">minimum</span>: <span class=\"pl-c1\">0</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">integer</span>","                    <span class=\"pl-ent\">reason</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">reason contains a programmatic identifier indicating</span>","                        <span class=\"pl-s\">the reason for the condition&#39;s last transition. Producers</span>","                        <span class=\"pl-s\">of specific condition types may define expected values and</span>","                        <span class=\"pl-s\">meanings for this field, and whether the values are considered</span>","                        <span class=\"pl-s\">a guaranteed API. The value should be a CamelCase string.</span>","                        <span class=\"pl-s\">This field may not be empty.</span>","                      <span class=\"pl-ent\">maxLength</span>: <span class=\"pl-c1\">1024</span>","                      <span class=\"pl-ent\">minLength</span>: <span class=\"pl-c1\">1</span>","                      <span class=\"pl-ent\">pattern</span>: <span class=\"pl-s\">^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                    <span class=\"pl-ent\">status</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">status of the condition, one of True, False, Unknown.</span>","                      <span class=\"pl-ent\">enum</span>:","                      - <span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>True<span class=\"pl-pds\">&quot;</span></span>","                      - <span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>False<span class=\"pl-pds\">&quot;</span></span>","                      - <span class=\"pl-s\">Unknown</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                    <span class=\"pl-ent\">type</span>:","                      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">type of condition in CamelCase or in foo.example.com/CamelCase.</span>","                        <span class=\"pl-s\">--- Many .condition.type values are consistent across resources</span>","                        <span class=\"pl-s\">like Available, but because arbitrary conditions can be useful</span>","                        <span class=\"pl-s\">(see .node.status.conditions), the ability to deconflict is</span>","                        <span class=\"pl-s\">important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)</span>","                      <span class=\"pl-ent\">maxLength</span>: <span class=\"pl-c1\">316</span>","                      <span class=\"pl-ent\">pattern</span>: <span class=\"pl-s\">^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$</span>","                      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","                  <span class=\"pl-ent\">required</span>:","                  - <span class=\"pl-s\">lastTransitionTime</span>","                  - <span class=\"pl-s\">message</span>","                  - <span class=\"pl-s\">reason</span>","                  - <span class=\"pl-s\">status</span>","                  - <span class=\"pl-s\">type</span>","                  <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">array</span>","              <span class=\"pl-ent\">lastPostedBodyHash</span>:","                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>","            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","        <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">object</span>","    <span class=\"pl-ent\">served</span>: <span class=\"pl-c1\">true</span>","    <span class=\"pl-ent\">storage</span>: <span class=\"pl-c1\">true</span>","    <span class=\"pl-ent\">subresources</span>:","      <span class=\"pl-ent\">status</span>: <span class=\"pl-s\">{}</span>"],"stylingDirectives":null,"csv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/kluctl/charts/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":null,"repoAlertsPath":"/kluctl/charts/security/dependabot","repoSecurityAndAnalysisPath":"/kluctl/charts/settings/security_analysis","repoOwnerIsOrg":true,"currentUserCanAdminRepo":false},"displayName":"templates.kluctl.io_githubcomments.yaml","displayUrl":"https://github.com/kluctl/charts/blob/template-controller-0.2.2/charts/template-controller/crds/templates.kluctl.io_githubcomments.yaml?raw=true","headerInfo":{"blobSize":"8.94 KB","deleteInfo":{"deletePath":null,"deleteTooltip":"You must be signed in to make or propose changes"},"editInfo":{"editTooltip":"You must be signed in to make or propose changes"},"ghDesktopPath":null,"gitLfsPath":null,"onBranch":false,"shortPath":"ef25f29","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkluctl%2Fcharts%2Fblob%2Ftemplate-controller-0.2.2%2Fcharts%2Ftemplate-controller%2Fcrds%2Ftemplates.kluctl.io_githubcomments.yaml","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"197","truncatedSloc":"197"},"mode":"file"},"image":false,"isCodeownersFile":null,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":"YAML","large":false,"loggedIn":false,"newDiscussionPath":"/kluctl/charts/discussions/new","newIssuePath":"/kluctl/charts/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/kluctl/charts/blob/template-controller-0.2.2/charts/template-controller/crds/templates.kluctl.io_githubcomments.yaml","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/kluctl/charts/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"kluctl","repoName":"charts","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":true,"symbols":[]}},"csrf_tokens":{"/kluctl/charts/branches":{"post":"Q-blTzu3vaMwBV6qHmhz7VEj2HcUkGxVmTagw5jrxKwwERp7AdyoGyYeRAcLzLJZKPJeuHYF9Bs6D52Uul8Wlw"}}},"title":"charts/charts/template-controller/crds/templates.kluctl.io_githubcomments.yaml at template-controller-0.2.2 · kluctl/charts","locale":"en"}