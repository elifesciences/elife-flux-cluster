---
apiVersion: v1
kind: Namespace
metadata:
  name: loggly
  labels:
    name: loggly
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: loggly
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd-role
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - pods/logs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluentd-role
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: loggly
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: loggly
  labels:
    k8s-app: fluentd-loggly
data:
  fluent.conf: |
    <match fluent.**>
         # this tells fluentd to not output its log on stdout
         @type null
     </match>

     # read the logs from containers and parse them
     <source>
       @type tail
       path /var/log/containers/*.log
       pos_file /var/log/containers.log.pos
       tag kubernetes.*
       read_from_head true
       <parse>
         @type json
         time_format %Y-%m-%dT%H:%M:%S.%NZ
       </parse>
     </source>

     # use kubernetes metadata plugin to add metadatas to the log
     <filter kubernetes.**>
         @type kubernetes_metadata
     </filter>

     # exclude healthchecks
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /health/
       </exclude>
     </filter>
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /ping/
       </exclude>
     </filter>
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /convert/
       </exclude>
     </filter>
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /kube-probe/
       </exclude>
     </filter>

     # exclude 'all good' messages
     # external-dns
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /All records are already up to date/
       </exclude>
     </filter>
     # sealed-secrets
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /SealedSecret unsealed successfully/
       </exclude>
     </filter>
     # cert-manager cainjector
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /Successfully reconciled/
       </exclude>
     </filter>
     # ingress-nginx
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /successfully validated configuration/
       </exclude>
     </filter>

     # exclude http messages
     <filter kubernetes.**>
       @type grep
       <exclude>
         key log
         pattern /(GET|POST|PUT|PATCH|DELETE)/
       </exclude>
     </filter>

     # exclude namespaces/containers
     <match kubernetes.var.log.containers.**monitoring**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**loggly**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**flux**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**descheduler**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**kube-system**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**autoscaler**.log>
     @type null
     </match>
     <match kubernetes.var.log.containers.**logging**.log>
     @type null
     </match>

     # Exclude MongoDB logging
     <match kubernetes.var.log.containers.**mongod**.log>
     @type null
     </match>

     <match **>
       @type loggly
       loggly_url "https://logs-01.loggly.com/inputs/#{ENV['TOKEN']}/"
     </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-loggly
  namespace: loggly
  annotations:
    fluxcd.io/automated: "true"
    filter.fluxcd.io/fluentd-loggly: glob:v1*-debian-loggly-1*
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-loggly
  template:
    metadata:
      labels:
        k8s-app: fluentd-loggly
    spec:
      serviceAccountName: fluentd
      terminationGracePeriodSeconds: 30
      # Because the image's entrypoint requires to write on /fluentd/etc but we mount configmap there which is read-only,
      # this initContainers workaround or other is needed.
      # See https://github.com/fluent/fluentd-kubernetes-daemonset/issues/90
      initContainers:
      - name: copy-fluentd-config
        image: busybox
        command: ['sh', '-c', 'cp /config-volume/..data/* /fluentd/etc']
        volumeMounts:
        - name: config-volume
          mountPath: /config-volume
        - name: fluentdconf
          mountPath: /fluentd/etc
      - name: update-log-driver
        image: busybox
        command: ['sh', '-c', '']
      containers:
      - name: fluentd-loggly
        image: fluent/fluentd-kubernetes-daemonset:v1.15.3-debian-loggly-amd64-1.0
        env:
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: loggly-config
              key: loggly.token
        resources:
          limits:
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: config-volume
          mountPath: /config-volume
        - name: fluentdconf
          mountPath: /fluentd/etc
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: runlogjournal
          mountPath: /run/log/journal
          readOnly: true
        - name: dmesg
          mountPath: /var/log/dmesg
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: fluentd-config
      - name: fluentdconf
        emptyDir: {}
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: runlogjournal
        hostPath:
          path: /run/log/journal
      - name: dmesg
        hostPath:
          path: /var/log/dmesg
