apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: peerscout--prod
  namespace: peerscout
spec:
  releaseName: peerscout--prod
  interval: 5m
  chart:
    spec:
      chart: charts/peerscout
      sourceRef:
        kind: GitRepository
        name: peerscout--prod
      interval: 1m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    replicaCount: 2
    image:
      repository: docker.io/elifesciences/data-science-dags_peerscout-api # {"$imagepolicy": "peerscout:peerscout-stable:name"}
      tag: "0.0.15" # {"$imagepolicy": "peerscout:peerscout-stable:tag"}
    env:
      DATA_SCIENCE_STATE_PATH: s3://prod-elife-data-pipeline/airflow-config/data-science/state
      GOOGLE_APPLICATION_CREDENTIALS: /root/.gcp/credentials.json
      DEPLOYMENT_ENV: prod
      PEERSCOUT_API_TARGET_DATASET: prod
      SPACY_LANGUAGE_MODEL_NAME: "en_core_web_lg"
    volumeMounts:
    - name: aws-credentials-sealed-secret-volume
      mountPath: /root/.aws
      readOnly: true
    - name: gcp-credentials-sealed-secret-volume
      mountPath: /root/.gcp
      readOnly: true
    volumes:
    - name: aws-credentials-sealed-secret-volume
      secret:
        secretName: aws-credentials
    - name: gcp-credentials-sealed-secret-volume
      secret:
        secretName: gcp-credentials
    ingress:
      enabled: "true"
      hosts:
      - host: peerscout.elifesciences.org
        paths:
        - "/"
      annotations:
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: peerscout-http-basic-auth--prod
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - peerscout'
    resources:
      requests:
        cpu: 250m
        memory: 2.5Gi
      limits:
        cpu: 500m
        memory: 3Gi
      livenessProbe:
        httpGet:
          path: /api/status
          port: http
        timeoutSeconds: 30
        periodSeconds: 30
      readinessProbe:
        httpGet:
          path: /api/status
          port: http
        timeoutSeconds: 30
        periodSeconds: 30
      startupProbe:
        httpGet:
          path: /api/status
          port: http
        timeoutSeconds: 30
        periodSeconds: 30
        failureThreshold: 10
    nodeSelector:
      karpenter.sh/nodepool: peerscout
    tolerations:
    - key: "peerscout"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
